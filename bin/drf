#!/usr/bin/env node


const drf= require('../index.js');
const args = process.argv.slice(2);
const path = process.cwd();
const run = function(args){
    var options = {};
    args.forEach(function (arg) {
        if (startsWith(arg, "--compress")) {
            options.compress = arg.split('=', 2)[1];
        }
        if (startsWith(arg, "--bakdir")) {
            options.bakdir = arg.split('=', 2)[1];
        }
        if (startsWith(arg, "--pack")) {
            options.pack = true;
        }
        if (startsWith(arg, "--del")) {
            options.del = true;
        }
        if (startsWith(arg, "--del-diff")) {
            options.deldiff = true;
        }
        if (startsWith(arg, "--bak-name")) {
            options.bakname = arg.split('=', 2)[1];
        }
    });
    function startsWith(str, prefix) {
        return str.substr(0, prefix.length) == prefix;
    }
    if(args[0] === '-v'){
        console.log('version is 0.0.1');
        process.exit(1);
    }else if(args[0] === '-h'){
        console.log('Useage: drf [source] [destination] [--compress=none|zip|gz ][--pack] [--del] [--del-diff]  [--bak=bakdir] [--bak-name=bakname]');
        console.log('-v --version [show version]');
        process.exit(1);
    }else if(args.length < 2 && (!options.pack || !options.deldiff)){
        console.error('Usage: drf [source] [destination] [--compress=none|zip|gz ][--pack] [--del] [--del-diff][--bak=bakdir] [--bak-name=bakname]');
        process.exit(1);
    }else{
        if(options.deldiff || options.pack){
            args[1] ='null';
        }
        try {
            drf(args[0], args[1],options, function (err) {
                if (Array.isArray(err)) {
                    console.error('There were errors during the contrast.');
                    err.forEach(function (err) {
                        console.error(err.stack || err.message);
                    });
                }else if (err) {
                    console.error('An error has occurred.');
                    console.error(err.stack || err.message);
                }
            });
        } catch (e) {
            console.error((e))
            process.exit(1);
        }
    }
};

run(process.argv.slice(2))
